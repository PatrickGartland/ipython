#StatMech2 Homework Assignment 2

from __future__ import division
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
import sympy 
from sympy import init_printing
init_printing(use_latex=True)
from sympy.utilities.lambdify import lambdify

#Noisy Harmonic Oscillator
#Want to integrate the Langevin Equation: 
# m*dx^2/dt^2 = -b*dx/dt-k*x+f(t), where f(t) is white noise.
#solve system of equations:
#dx/dt = v
#dv/dt = f/m -(k/m)x - (b/m)v

#dt = 0.01
#kappa = 1E-4
#a = np.sqrt(3*kappa)
#v_vec = np.zeros(50001)
#x_vec = 0.000*np.ones(50001)
#t_vec = np.linspace(0,500,num=50001)

def solve_sho_langevin():
    dt = 0.01
    kappa = 1E-4
    a = np.sqrt(3*kappa)
    v_vec = np.zeros(50001)
    x_vec = 0.000*np.ones(50001)
    t_vec = np.linspace(0,500,num=50001)
    m = 1.
    b = 1.
    kappa = 1E-4
    k = 4*np.pi**2
    v = 0
    x = 0
    
    for ind in range(50000):
        if ind !=0:
            random_noise = np.random.random(1)*2*a-a
            f = random_noise
            dx = v_vec[ind-1]*dt
            dv = dt*(f-k*x_vec[ind-1]-b*v_vec[ind-1])/m
            x_vec[ind] = x_vec[ind-1]+dx
            v_vec[ind] = v_vec[ind-1] + dv

    #plt.plot(t_vec[:1000],x_vec[:1000])
    #plt.show()
    return x_vec,v_vec


x,v =solve_sho_langevin()
plt.plot(t_vec[:1000],x_vec[:1000])
plt.show()

def pspec(x_t,t):
    #returns the power spectrum of x(t), which has a time length of t
    fft_x = np.fft.fft(x_t)
    return 1/(np.pi*2*t)*(fft_x)*np.conj(fft_x)

def avg_over_pspec(n):
    #averages over n realizations of power spectra of x(t).
    y = np.zeros((50001,n),dtype=complex)
    for ind in range(n):
        x,v = solve_sho_langevin()
        y_elem = pspec(x,500)
        y[:,ind] = y_elem
    if n==1:
        return y
    else:
        return np.mean(y,axis=1)





#y = avg_over_pspec(2)
#plt.plot(y[:1000])
#plt.show()
#fft_x = np.fft.fft(x_vec)
#plt.plot(((fft_x)*np.conj(fft_x))[:1000])
#plt.show()
pspec_n1  = avg_over_pspec(1)
pspec_n10 = avg_over_pspec(10)
pspec_n100= avg_over_pspec(100)

plt.subplot(3,1,1)
plt.plot(pspec_n1)
plt.subplot(3,1,2)
plt.plot(pspec_n10)
plt.subplot(3,1,3)
plt.plot(pspec_n100)
plt.show()


plt.subplot(3,1,1)
plt.plot(pspec_n1[:1000])
plt.title("N=1")
plt.subplot(3,1,2)
plt.plot(pspec_n10[:1000])
plt.title("N=10")
plt.subplot(3,1,3)
plt.plot(pspec_n100[:1000])
plt.title("N=100")
fig = plt.gcf()
fig.set_size_inches(8,8)
plt.show()
